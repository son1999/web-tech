#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinQPart2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="banhang")]
	public partial class NhanvienDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNHANVIEN(NHANVIEN instance);
    partial void UpdateNHANVIEN(NHANVIEN instance);
    partial void DeleteNHANVIEN(NHANVIEN instance);
    partial void InsertDONVI(DONVI instance);
    partial void UpdateDONVI(DONVI instance);
    partial void DeleteDONVI(DONVI instance);
    #endregion
		
		public NhanvienDataContext() : 
				base(global::LinQPart2.Properties.Settings.Default.banhangConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NhanvienDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NhanvienDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NhanvienDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NhanvienDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<NHANVIEN> NHANVIENs
		{
			get
			{
				return this.GetTable<NHANVIEN>();
			}
		}
		
		public System.Data.Linq.Table<DONVI> DONVIs
		{
			get
			{
				return this.GetTable<DONVI>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NHANVIEN")]
	public partial class NHANVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MANV;
		
		private string _HOTEN;
		
		private string _NGAYSINH;
		
		private string _DIACHI;
		
		private string _DIENTHOAI;
		
		private double _HSLUONG;
		
		private int _MADONVI;
		
		private EntityRef<DONVI> _DONVI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMANVChanging(int value);
    partial void OnMANVChanged();
    partial void OnHOTENChanging(string value);
    partial void OnHOTENChanged();
    partial void OnNGAYSINHChanging(string value);
    partial void OnNGAYSINHChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnDIENTHOAIChanging(string value);
    partial void OnDIENTHOAIChanged();
    partial void OnHSLUONGChanging(double value);
    partial void OnHSLUONGChanged();
    partial void OnMADONVIChanging(int value);
    partial void OnMADONVIChanged();
    #endregion
		
		public NHANVIEN()
		{
			this._DONVI = default(EntityRef<DONVI>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANV", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MANV
		{
			get
			{
				return this._MANV;
			}
			set
			{
				if ((this._MANV != value))
				{
					this.OnMANVChanging(value);
					this.SendPropertyChanging();
					this._MANV = value;
					this.SendPropertyChanged("MANV");
					this.OnMANVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOTEN", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string HOTEN
		{
			get
			{
				return this._HOTEN;
			}
			set
			{
				if ((this._HOTEN != value))
				{
					this.OnHOTENChanging(value);
					this.SendPropertyChanging();
					this._HOTEN = value;
					this.SendPropertyChanged("HOTEN");
					this.OnHOTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIENTHOAI", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string DIENTHOAI
		{
			get
			{
				return this._DIENTHOAI;
			}
			set
			{
				if ((this._DIENTHOAI != value))
				{
					this.OnDIENTHOAIChanging(value);
					this.SendPropertyChanging();
					this._DIENTHOAI = value;
					this.SendPropertyChanged("DIENTHOAI");
					this.OnDIENTHOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSLUONG", DbType="Float NOT NULL")]
		public double HSLUONG
		{
			get
			{
				return this._HSLUONG;
			}
			set
			{
				if ((this._HSLUONG != value))
				{
					this.OnHSLUONGChanging(value);
					this.SendPropertyChanging();
					this._HSLUONG = value;
					this.SendPropertyChanged("HSLUONG");
					this.OnHSLUONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MADONVI", DbType="Int NOT NULL")]
		public int MADONVI
		{
			get
			{
				return this._MADONVI;
			}
			set
			{
				if ((this._MADONVI != value))
				{
					if (this._DONVI.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMADONVIChanging(value);
					this.SendPropertyChanging();
					this._MADONVI = value;
					this.SendPropertyChanged("MADONVI");
					this.OnMADONVIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DONVI_NHANVIEN", Storage="_DONVI", ThisKey="MADONVI", OtherKey="MADONVI", IsForeignKey=true)]
		public DONVI DONVI
		{
			get
			{
				return this._DONVI.Entity;
			}
			set
			{
				DONVI previousValue = this._DONVI.Entity;
				if (((previousValue != value) 
							|| (this._DONVI.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DONVI.Entity = null;
						previousValue.NHANVIENs.Remove(this);
					}
					this._DONVI.Entity = value;
					if ((value != null))
					{
						value.NHANVIENs.Add(this);
						this._MADONVI = value.MADONVI;
					}
					else
					{
						this._MADONVI = default(int);
					}
					this.SendPropertyChanged("DONVI");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DONVI")]
	public partial class DONVI : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MADONVI;
		
		private string _TENDONVI;
		
		private string _DIENTHOAI;
		
		private EntitySet<NHANVIEN> _NHANVIENs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMADONVIChanging(int value);
    partial void OnMADONVIChanged();
    partial void OnTENDONVIChanging(string value);
    partial void OnTENDONVIChanged();
    partial void OnDIENTHOAIChanging(string value);
    partial void OnDIENTHOAIChanged();
    #endregion
		
		public DONVI()
		{
			this._NHANVIENs = new EntitySet<NHANVIEN>(new Action<NHANVIEN>(this.attach_NHANVIENs), new Action<NHANVIEN>(this.detach_NHANVIENs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MADONVI", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MADONVI
		{
			get
			{
				return this._MADONVI;
			}
			set
			{
				if ((this._MADONVI != value))
				{
					this.OnMADONVIChanging(value);
					this.SendPropertyChanging();
					this._MADONVI = value;
					this.SendPropertyChanged("MADONVI");
					this.OnMADONVIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENDONVI", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string TENDONVI
		{
			get
			{
				return this._TENDONVI;
			}
			set
			{
				if ((this._TENDONVI != value))
				{
					this.OnTENDONVIChanging(value);
					this.SendPropertyChanging();
					this._TENDONVI = value;
					this.SendPropertyChanged("TENDONVI");
					this.OnTENDONVIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIENTHOAI", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string DIENTHOAI
		{
			get
			{
				return this._DIENTHOAI;
			}
			set
			{
				if ((this._DIENTHOAI != value))
				{
					this.OnDIENTHOAIChanging(value);
					this.SendPropertyChanging();
					this._DIENTHOAI = value;
					this.SendPropertyChanged("DIENTHOAI");
					this.OnDIENTHOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DONVI_NHANVIEN", Storage="_NHANVIENs", ThisKey="MADONVI", OtherKey="MADONVI")]
		public EntitySet<NHANVIEN> NHANVIENs
		{
			get
			{
				return this._NHANVIENs;
			}
			set
			{
				this._NHANVIENs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NHANVIENs(NHANVIEN entity)
		{
			this.SendPropertyChanging();
			entity.DONVI = this;
		}
		
		private void detach_NHANVIENs(NHANVIEN entity)
		{
			this.SendPropertyChanging();
			entity.DONVI = null;
		}
	}
}
#pragma warning restore 1591
